version: v1.0
name: Semaphore Python / Django Example Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
global_job_config:
  prologue:
    commands:
      - sem-version python 3.10
blocks:
  - name: Install Dependencies
    task:
      prologue:
        commands:
          - sudo apt-get update
          - sudo apt-get install -y software-properties-common
          - 'sudo add-apt-repository ppa:deadsnakes/ppa -y || true'
          - sudo apt-get install -y python3.10 python3.10-venv python3.10-dev
      jobs:
        - name: pip
          commands:
            - checkout
            - cache restore
            - python3.10 -m venv ~/virtualenv || python3.10 -m ensurepip --default-pip
            - source ~/virtualenv/bin/activate
            - pip install --upgrade pip
            - pip install -r requirements.txt
  - name: Run Code Analysis
    task:
      prologue:
        commands:
          - checkout
          - cache restore
          - pip install -r requirements.txt --cache-dir .pip_cache
          - pip install --upgrade pylint
          - pip install pylint
      jobs:
        - name: Pylint
          commands:
            - pip install --upgrade pylint pylint-django pylint-plugin-utils
            - 'pylint --disable=all --enable=E,F --generated-members=objects $(git ls-files ''*.py'' | grep -v ''migrations'' | grep -v ''settings.py'' | grep -v ''manage.py'')'
  - name: Run Unit Tests
    task:
      prologue:
        commands:
          - checkout
          - cache restore
          - sudo apt-get update
          - sudo apt-get install -y mysql-server
          - sudo systemctl start mysql
          - sleep 5  # Allow MySQL time to initialize
          - 'mysql --version  # Check installed version'
          # Configure MySQL root user to allow remote access
          - sudo mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'abc123'; FLUSH PRIVILEGES;"
          # Allow remote access by granting privileges
          - sudo mysql -uroot -pabc123 -e "CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'abc123';"
          - sudo mysql -uroot -pabc123 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;"
          - sudo mysql -uroot -pabc123 -e "FLUSH PRIVILEGES;"
          - sudo mysql -uroot -pabc123 -e "CREATE DATABASE IF NOT EXISTS pydjango;"         
          - pip install -r requirements.txt --cache-dir .pip_cache
      jobs:
        - name: Model Test
          commands:            
            - python manage.py test tasks.tests.test_models
        - name: View Test
          commands:           
            - python manage.py test tasks.tests.test_views
  - name: Run Browser Tests
    task:
      env_vars:
        - name: DB_NAME
          value: pydjango 
        - name: MYSQL_ROOT_PASSWORD
          value: abc123
      prologue:
        commands:
          - sem-service start mysql 8.0   # This starts MySQL in Semaphore CI                   
          - sleep 5  # Allow MySQL to initialize
          - mysql --version
          - mysqladmin -h localhost -u root status  # Verify MySQL is running
          # Configure MySQL root user to allow remote access
          - sudo mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'abc123'; FLUSH PRIVILEGES;"
          # Allow remote access by granting privileges
          - sudo mysql -uroot -pabc123 -e "CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'abc123';"
          - sudo mysql -uroot -pabc123 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;"
          - sudo mysql -uroot -pabc123 -e "FLUSH PRIVILEGES;"
          - sudo mysql -uroot -pabc123 -e "CREATE DATABASE IF NOT EXISTS pydjango;"
          - checkout
          - cache restore         
          - pip install -r requirements.txt --cache-dir .pip_cache
          - 'nohup python manage.py runserver 0.0.0.0:8000 &'
      jobs:
        - name: Browser Test
          commands:            
            - python manage.py test tasks.tests.test_browser
  - name: Run Security Tests
    task:
      jobs:
        - name: Deployment Checklist
          commands:
            - checkout
            - cache restore            
            - pip install -r requirements.txt --cache-dir .pip_cache
            - python manage.py check --deploy --fail-level ERROR
